/* tslint:disable */
/* eslint-disable */
/**
 * portier KeyOnTheGo Service
 * Add basic auth for authorization when using cloud server. Use Account Id and M2M token for username and password respectively.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSignRequest,
  CreateSignResponse,
  KeyOtgSignRequestIDGet200Response,
} from '../models/index';
import {
    CreateSignRequestFromJSON,
    CreateSignRequestToJSON,
    CreateSignResponseFromJSON,
    CreateSignResponseToJSON,
    KeyOtgSignRequestIDGet200ResponseFromJSON,
    KeyOtgSignRequestIDGet200ResponseToJSON,
} from '../models/index';

export interface KeyOtgSignPostRequest {
    xPortierAgent: string;
    createSignRequest: CreateSignRequest;
}

export interface KeyOtgSignRequestIDGetRequest {
    xPortierAgent: string;
    requestID: string;
    token: string;
}

export interface KeyOtgSignRequestIDQrGetRequest {
    xPortierAgent: string;
    requestID: string;
    token: string;
}

/**
 * 
 */
export class FromDesktopApi extends runtime.BaseAPI {

    /**
     * Create a new signing request from desktop app. We need to check whether this account id has active plan and send request information for better visibility.
     * Create a new signing request
     */
    async keyOtgSignPostRaw(requestParameters: KeyOtgSignPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSignResponse>> {
        if (requestParameters['xPortierAgent'] == null) {
            throw new runtime.RequiredError(
                'xPortierAgent',
                'Required parameter "xPortierAgent" was null or undefined when calling keyOtgSignPost().'
            );
        }

        if (requestParameters['createSignRequest'] == null) {
            throw new runtime.RequiredError(
                'createSignRequest',
                'Required parameter "createSignRequest" was null or undefined when calling keyOtgSignPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xPortierAgent'] != null) {
            headerParameters['X-Portier-Agent'] = String(requestParameters['xPortierAgent']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/key-otg/sign`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSignRequestToJSON(requestParameters['createSignRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSignResponseFromJSON(jsonValue));
    }

    /**
     * Create a new signing request from desktop app. We need to check whether this account id has active plan and send request information for better visibility.
     * Create a new signing request
     */
    async keyOtgSignPost(requestParameters: KeyOtgSignPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSignResponse> {
        const response = await this.keyOtgSignPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get signed request
     */
    async keyOtgSignRequestIDGetRaw(requestParameters: KeyOtgSignRequestIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeyOtgSignRequestIDGet200Response>> {
        if (requestParameters['xPortierAgent'] == null) {
            throw new runtime.RequiredError(
                'xPortierAgent',
                'Required parameter "xPortierAgent" was null or undefined when calling keyOtgSignRequestIDGet().'
            );
        }

        if (requestParameters['requestID'] == null) {
            throw new runtime.RequiredError(
                'requestID',
                'Required parameter "requestID" was null or undefined when calling keyOtgSignRequestIDGet().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling keyOtgSignRequestIDGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xPortierAgent'] != null) {
            headerParameters['X-Portier-Agent'] = String(requestParameters['xPortierAgent']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/key-otg/sign/{requestID}`.replace(`{${"requestID"}}`, encodeURIComponent(String(requestParameters['requestID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyOtgSignRequestIDGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * Get signed request
     */
    async keyOtgSignRequestIDGet(requestParameters: KeyOtgSignRequestIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeyOtgSignRequestIDGet200Response> {
        const response = await this.keyOtgSignRequestIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get QR code for this request
     */
    async keyOtgSignRequestIDQrGetRaw(requestParameters: KeyOtgSignRequestIDQrGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['xPortierAgent'] == null) {
            throw new runtime.RequiredError(
                'xPortierAgent',
                'Required parameter "xPortierAgent" was null or undefined when calling keyOtgSignRequestIDQrGet().'
            );
        }

        if (requestParameters['requestID'] == null) {
            throw new runtime.RequiredError(
                'requestID',
                'Required parameter "requestID" was null or undefined when calling keyOtgSignRequestIDQrGet().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling keyOtgSignRequestIDQrGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xPortierAgent'] != null) {
            headerParameters['X-Portier-Agent'] = String(requestParameters['xPortierAgent']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/key-otg/sign/{requestID}/qr`.replace(`{${"requestID"}}`, encodeURIComponent(String(requestParameters['requestID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get QR code for this request
     */
    async keyOtgSignRequestIDQrGet(requestParameters: KeyOtgSignRequestIDQrGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.keyOtgSignRequestIDQrGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
