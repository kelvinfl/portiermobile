/* tslint:disable */
/* eslint-disable */
/**
 * portier KeyOnTheGo Service
 * Add basic auth for authorization when using cloud server. Use Account Id and M2M token for username and password respectively.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  KeyOtgSignRequestIDGet200Response,
  SignResponse,
  SignSubmitRequest,
} from '../models/index';
import {
    KeyOtgSignRequestIDGet200ResponseFromJSON,
    KeyOtgSignRequestIDGet200ResponseToJSON,
    SignResponseFromJSON,
    SignResponseToJSON,
    SignSubmitRequestFromJSON,
    SignSubmitRequestToJSON,
} from '../models/index';

export interface KeyOtgSignRequestIDGetRequest {
    xPortierAgent: string;
    requestID: string;
    token: string;
}

export interface KeyOtgSignRequestIDPostRequest {
    requestID: string;
    token: string;
    signSubmitRequest: SignSubmitRequest;
}

/**
 * 
 */
export class FromMobileApi extends runtime.BaseAPI {

    /**
     * List sign requests for this account id.
     * List sign requests
     */
    async keyOtgSignGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SignResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/key-otg/sign`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SignResponseFromJSON));
    }

    /**
     * List sign requests for this account id.
     * List sign requests
     */
    async keyOtgSignGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SignResponse>> {
        const response = await this.keyOtgSignGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get signed request
     */
    async keyOtgSignRequestIDGetRaw(requestParameters: KeyOtgSignRequestIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeyOtgSignRequestIDGet200Response>> {
        if (requestParameters['xPortierAgent'] == null) {
            throw new runtime.RequiredError(
                'xPortierAgent',
                'Required parameter "xPortierAgent" was null or undefined when calling keyOtgSignRequestIDGet().'
            );
        }

        if (requestParameters['requestID'] == null) {
            throw new runtime.RequiredError(
                'requestID',
                'Required parameter "requestID" was null or undefined when calling keyOtgSignRequestIDGet().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling keyOtgSignRequestIDGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xPortierAgent'] != null) {
            headerParameters['X-Portier-Agent'] = String(requestParameters['xPortierAgent']);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/key-otg/sign/{requestID}`.replace(`{${"requestID"}}`, encodeURIComponent(String(requestParameters['requestID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeyOtgSignRequestIDGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * Get signed request
     */
    async keyOtgSignRequestIDGet(requestParameters: KeyOtgSignRequestIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeyOtgSignRequestIDGet200Response> {
        const response = await this.keyOtgSignRequestIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sending a sign image and encode it
     * Sign the request
     */
    async keyOtgSignRequestIDPostRaw(requestParameters: KeyOtgSignRequestIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignResponse>> {
        if (requestParameters['requestID'] == null) {
            throw new runtime.RequiredError(
                'requestID',
                'Required parameter "requestID" was null or undefined when calling keyOtgSignRequestIDPost().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling keyOtgSignRequestIDPost().'
            );
        }

        if (requestParameters['signSubmitRequest'] == null) {
            throw new runtime.RequiredError(
                'signSubmitRequest',
                'Required parameter "signSubmitRequest" was null or undefined when calling keyOtgSignRequestIDPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/key-otg/sign/{requestID}`.replace(`{${"requestID"}}`, encodeURIComponent(String(requestParameters['requestID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignSubmitRequestToJSON(requestParameters['signSubmitRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignResponseFromJSON(jsonValue));
    }

    /**
     * Sending a sign image and encode it
     * Sign the request
     */
    async keyOtgSignRequestIDPost(requestParameters: KeyOtgSignRequestIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignResponse> {
        const response = await this.keyOtgSignRequestIDPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
