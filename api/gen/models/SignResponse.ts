/* tslint:disable */
/* eslint-disable */
/**
 * portier KeyOnTheGo Service
 * Add basic auth for authorization when using cloud server. Use Account Id and M2M token for username and password respectively.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Status } from './Status';
import {
    StatusFromJSON,
    StatusFromJSONTyped,
    StatusToJSON,
    StatusToJSONTyped,
} from './Status';
import type { Issue } from './Issue';
import {
    IssueFromJSON,
    IssueFromJSONTyped,
    IssueToJSON,
    IssueToJSONTyped,
} from './Issue';

/**
 * 
 * @export
 * @interface SignResponse
 */
export interface SignResponse {
    /**
     * 
     * @type {string}
     * @memberof SignResponse
     */
    requestId?: string;
    /**
     * 
     * @type {Status}
     * @memberof SignResponse
     */
    status?: Status;
    /**
     * 
     * @type {Date}
     * @memberof SignResponse
     */
    signedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SignResponse
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SignResponse
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SignResponse
     */
    requestUser: string;
    /**
     * 
     * @type {string}
     * @memberof SignResponse
     */
    holderId: string;
    /**
     * 
     * @type {string}
     * @memberof SignResponse
     */
    holderName: string;
    /**
     * 
     * @type {string}
     * @memberof SignResponse
     */
    notes?: string;
    /**
     * 
     * @type {Array<Issue>}
     * @memberof SignResponse
     */
    issue: Array<Issue>;
    /**
     * Base64 encoded signing data.
     * @type {string}
     * @memberof SignResponse
     */
    sign: string;
    /**
     * 
     * @type {number}
     * @memberof SignResponse
     */
    locationLatitude?: number;
    /**
     * 
     * @type {number}
     * @memberof SignResponse
     */
    locationLongitude?: number;
}



/**
 * Check if a given object implements the SignResponse interface.
 */
export function instanceOfSignResponse(value: object): value is SignResponse {
    if (!('requestUser' in value) || value['requestUser'] === undefined) return false;
    if (!('holderId' in value) || value['holderId'] === undefined) return false;
    if (!('holderName' in value) || value['holderName'] === undefined) return false;
    if (!('issue' in value) || value['issue'] === undefined) return false;
    if (!('sign' in value) || value['sign'] === undefined) return false;
    return true;
}

export function SignResponseFromJSON(json: any): SignResponse {
    return SignResponseFromJSONTyped(json, false);
}

export function SignResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SignResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'requestId': json['request_id'] == null ? undefined : json['request_id'],
        'status': json['status'] == null ? undefined : StatusFromJSON(json['status']),
        'signedAt': json['signed_at'] == null ? undefined : (new Date(json['signed_at'])),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'requestUser': json['request_user'],
        'holderId': json['holder_id'],
        'holderName': json['holder_name'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'issue': ((json['issue'] as Array<any>).map(IssueFromJSON)),
        'sign': json['sign'],
        'locationLatitude': json['location_latitude'] == null ? undefined : json['location_latitude'],
        'locationLongitude': json['location_longitude'] == null ? undefined : json['location_longitude'],
    };
}

export function SignResponseToJSON(json: any): SignResponse {
    return SignResponseToJSONTyped(json, false);
}

export function SignResponseToJSONTyped(value?: SignResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'request_id': value['requestId'],
        'status': StatusToJSON(value['status']),
        'signed_at': value['signedAt'] == null ? undefined : ((value['signedAt']).toISOString()),
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'request_user': value['requestUser'],
        'holder_id': value['holderId'],
        'holder_name': value['holderName'],
        'notes': value['notes'],
        'issue': ((value['issue'] as Array<any>).map(IssueToJSON)),
        'sign': value['sign'],
        'location_latitude': value['locationLatitude'],
        'location_longitude': value['locationLongitude'],
    };
}

