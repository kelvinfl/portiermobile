/* tslint:disable */
/* eslint-disable */
/**
 * portier KeyOnTheGo Service
 * Add basic auth for authorization when using cloud server. Use Account Id and M2M token for username and password respectively.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Issue } from './Issue';
import {
    IssueFromJSON,
    IssueFromJSONTyped,
    IssueToJSON,
    IssueToJSONTyped,
} from './Issue';

/**
 * 
 * @export
 * @interface CreateSignRequest
 */
export interface CreateSignRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateSignRequest
     */
    requestUser: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSignRequest
     */
    holderId: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSignRequest
     */
    holderName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSignRequest
     */
    notes?: string;
    /**
     * 
     * @type {Array<Issue>}
     * @memberof CreateSignRequest
     */
    issue: Array<Issue>;
}

/**
 * Check if a given object implements the CreateSignRequest interface.
 */
export function instanceOfCreateSignRequest(value: object): value is CreateSignRequest {
    if (!('requestUser' in value) || value['requestUser'] === undefined) return false;
    if (!('holderId' in value) || value['holderId'] === undefined) return false;
    if (!('holderName' in value) || value['holderName'] === undefined) return false;
    if (!('issue' in value) || value['issue'] === undefined) return false;
    return true;
}

export function CreateSignRequestFromJSON(json: any): CreateSignRequest {
    return CreateSignRequestFromJSONTyped(json, false);
}

export function CreateSignRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateSignRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'requestUser': json['request_user'],
        'holderId': json['holder_id'],
        'holderName': json['holder_name'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'issue': ((json['issue'] as Array<any>).map(IssueFromJSON)),
    };
}

export function CreateSignRequestToJSON(json: any): CreateSignRequest {
    return CreateSignRequestToJSONTyped(json, false);
}

export function CreateSignRequestToJSONTyped(value?: CreateSignRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'request_user': value['requestUser'],
        'holder_id': value['holderId'],
        'holder_name': value['holderName'],
        'notes': value['notes'],
        'issue': ((value['issue'] as Array<any>).map(IssueToJSON)),
    };
}

